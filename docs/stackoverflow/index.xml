<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Stackoverflow on</title><link>https://c3n1gbr0k3n.github.io/docs/stackoverflow/</link><description>Recent content in Stackoverflow on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 28 Mar 2023 22:48:58 +0800</lastBuildDate><atom:link href="https://c3n1gbr0k3n.github.io/docs/stackoverflow/index.xml" rel="self" type="application/rss+xml"/><item><title>ret2text</title><link>https://c3n1gbr0k3n.github.io/docs/stackoverflow/ret2text/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>https://c3n1gbr0k3n.github.io/docs/stackoverflow/ret2text/</guid><description>0x01 介绍 # 既然溢出可以覆盖局部变量，即利用栈三大功能之一保存局部变量，那么也可以利用栈三大功能之一保存函数返回后的地址，我们可以溢出覆盖函数返回后的地址为任意我们想要它返回执行的地方，从而实现getshell
![1af992215335770bc01df475475fa9e1]images/1af992215335770bc01df475475fa9e1.png
举一个例子来说
#include&amp;lt;stdio.h&amp;gt; #include&amp;lt;stdlib.h&amp;gt; void getshell() { // getshell函数 system(&amp;quot;/bin/sh&amp;quot;); } void run(){ // 写run函数的目的是为了简化，因为现在32位main函数需要绕过ecx char buf[0x10]; // local variable printf(&amp;quot;input: &amp;quot;); scanf(&amp;quot;%s&amp;quot;, buf); } int main(){ run(); return 0; } // gcc ret2text.c -o ret2text -m32 -fno-pic -no-pie -fno-stack-protector 按照正常的程序流程来说，main函数应该会返回执行_libc_start_main中的指令，但是scanf的%s格式化控制符是可以无字符数限制输入造成栈溢出的，这样我们就可以想办法覆盖main函数的函数返回地址为程序中getshell函数的地址，从而执行 system(&amp;quot;/bin/sh&amp;quot;); 首先需要的是确定getshell函数的位置，这里可以用objdump之类的工具来查看
![3cd18b5ddfdc7a98e374380aabba5015]images/3cd18b5ddfdc7a98e374380aabba5015.png</description></item><item><title>Ret2syscall</title><link>https://c3n1gbr0k3n.github.io/docs/stackoverflow/ret2syscall/</link><pubDate>Tue, 28 Mar 2023 21:07:32 +0800</pubDate><guid>https://c3n1gbr0k3n.github.io/docs/stackoverflow/ret2syscall/</guid><description>0x01 介绍 #</description></item></channel></rss>